<!DOCTYPE HTML>
<html lang="en">

<head>
    <meta charset="utf-8">
    <title>men's made</title>
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <meta name="description" content="">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="">
    <meta property="og:type" content="">
    <meta property="og:url" content="">
    <meta property="og:image" content="">
    <!-- Favicon -->
    <link rel="shortcut icon" type="image/x-icon" href="admin_assets/imgs/theme/favicon.svg">
    <link href="admin_assets/css/main.css" rel="stylesheet" type="text/css" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <!-- Template CSS -->
    <style>
        .image-container {
            position: relative;
            display: inline-block;
            margin: 5px;
        }

        .image-container img {
            width: 100px;
            height: 100px;
            object-fit: cover;
        }

        .close-icon {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            padding: 2px 6px;
            cursor: pointer;
            font-size: 12px;
        }

        .modal-body {
            padding: 0;
        }

        .img-container {
            width: 100%;
            height: 70vh;
            overflow: hidden;
        }

        #imageToCrop {
            display: block;
            max-width: 100%;
            max-height: 100%;
            margin: auto;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .img-container {
                height: 50vh;
            }
        }

        .cropper-container {
            width: 100% !important;
            height: 100% !important;
        }
    </style>
</head>

<body>
    <div class="screen-overlay"></div>
    <aside class="navbar-aside" id="offcanvas_aside">
        <div class="aside-top">
            <a href="index.html" class="brand-wrap">
                <img src="admin_assets/imgs/theme/website3.png" class="logo" alt="Evara Dashboard">
            </a>
            <div>
                <button class="btn btn-icon btn-aside-minimize"> <i class="text-muted material-icons md-menu_open"></i>
                </button>
            </div>
        </div>
        <nav>
            <ul class="menu-aside">
                <li class="menu-item active">
                    <a class="menu-link" href="/admin/home"> <i class="icon material-icons md-home"></i>
                        <span class="text">Dashboard</span>
                    </a>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="users"> <i class="icon material-icons md-shopping_cart"></i>
                        <span class="text">Users</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/userlist">User List</a>
        
                    </div>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="products"> <i class="icon material-icons md-shopping_bag"></i>
                        <span class="text">Products</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/productlist">Product List</a>
                        <a href="/admin/addProduct">Add product </a>

               
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="categories"> <i class="icon material-icons md-store"></i>
                        <span class="text">Categories</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/Category">Categories</a>
                    </div>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="#"> <i class="icon material-icons md-store"></i>
                        <span class="text">Orders</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/orderList">OrderList</a>
                    </div>
                </li> 
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="#"> <i class="icon material-icons md-store"></i>
                        <span class="text">Coupons</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/couponList">CouponList</a>
                    </div>
                </li>
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="#"> <i class="icon material-icons md-store"></i>
                        <span class="text">Offer</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/offerPage">offerList</a>
                    </div>
                </li>  
                <li class="menu-item has-submenu">
                    <a class="menu-link" href="#"> <i class="icon material-icons md-store"></i>
                        <span class="text">Sales</span>
                    </a>
                    <div class="submenu">
                        <a href="/admin/salesReport">saleReport</a>
                    </div>
                </li> 
            </ul> 
            <br>
            <br>
        </nav>
    </aside>
    <main class="main-wrap">
        <header class="main-header navbar">
            <div class="col-search">
                <form class="searchform">
                    <div class="input-group">
                        <input list="search_terms" type="text" class="form-control" placeholder="Search term">
                        <button class="btn btn-light bg" type="button"> <i
                                class="material-icons md-search"></i></button>
                    </div>
                </form>
            </div>
            <div class="col-nav">

                <ul class="nav">
                    <li class="nav-item">
                        <a class="nav-link btn-icon darkmode" href="#"> <i class="material-icons md-nights_stay"></i>
                        </a>
                    </li>
                    <li class="nav-item">
                        <a href="#" class="requestfullscreen nav-link btn-icon"><i
                                class="material-icons md-cast"></i></a>
                    </li>
                    <li class="dropdown nav-item">
                        <a class="dropdown-toggle" data-bs-toggle="dropdown" href="#" id="dropdownAccount"
                            aria-expanded="false"> <img class="img-xs rounded-circle"
                                src="admin_assets/imgs/people/avatar2.jpg" alt="User"></a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownAccount">
                            <a class="dropdown-item" href="#"><i class="material-icons md-perm_identity"></i>Edit
                                Profile</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-settings"></i>Account
                                Settings</a>
                            <a class="dropdown-item" href="#"><i
                                    class="material-icons md-account_balance_wallet"></i>Wallet</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-receipt"></i>Billing</a>
                            <a class="dropdown-item" href="#"><i class="material-icons md-help_outline"></i>Help
                                center</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item text-danger" href="#"><i
                                    class="material-icons md-exit_to_app"></i>Logout</a>
                        </div>
                    </li>
                </ul>
            </div>
        </header>
        <form method="post" action="/admin/update?id=<%=prodata._id%>" enctype="multipart/form-data" id="productForm"
            novalidate>
            <section class="content-main">
                <div class="d-flex flex-column align-items-center mb-4">
                    <div class="content-header text-center" style="margin-bottom: 20px;">
                        <h2 class="content-title card-title" style="margin-bottom: 0;">Edit product</h2>
                    </div>
                </div>
                <div class="d-flex justify-content-center">
                    <div class="col-lg-8">
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-4">
                                    <label for="product_title" class="form-label">Product title</label>
                                    <input type="text" placeholder="Type here" class="form-control" id="product_title"
                                        name="product_title" value="<%=prodata.productname%>" required
                                        pattern="^[A-Za-z\s]+$">
                                    <div class="invalid-feedback">Please enter a valid product name (letters and spaces
                                        only).</div>
                                </div>
                                <div class="mb-4">
                                    <label for="product_brand" class="form-label">Brand</label>
                                    <input type="text" placeholder="Type here" class="form-control" id="product_brand"
                                        name="product_brand" value="<%=prodata.brand%>" required
                                        pattern="^[A-Za-z\s]+$">
                                    <div class="invalid-feedback">Please enter a valid brand name (letters and spaces
                                        only).</div>
                                </div>
                                <div class="row gx-3">
                                    <div class="col-md-6 mb-3">
                                        <label for="price" class="form-label">Price</label>
                                        <input type="number" placeholder="Type here" class="form-control" id="price"
                                            name="price" value="<%=prodata.price%>" required min="0" step="0.01">
                                        <div class="invalid-feedback">Please enter a non-negative price.</div>
                                    </div>
                                    <div class="col-md-6 mb-3">
                                        <label for="category" class="form-label">Product category</label>
                                        <select class="form-select" id="category" name="category" required>
                                            <% category.forEach((cat)=> { %>
                                                <option value="<%= cat.name %>" <%=cat.name===prodata.productcategory
                                                    ? 'selected' : '' %>><%= cat.name %>
                                                </option>
                                                <% }) %>
                                        </select>
                                        <div class="invalid-feedback">Please select a category.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="description" class="form-label">Description</label>
                                    <textarea placeholder="Type here" class="form-control" id="description"
                                        name="description" rows="4" required
                                        pattern=".*[A-Za-z]+.*"><%=prodata.description%></textarea>
                                    <div class="invalid-feedback">Please enter a product description containing at least
                                        one letter.</div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="imageUpload" class="form-label">Images</label>
                                    <div id="existingImages" class="d-flex flex-wrap mt-3">
                                        <% prodata.images.forEach((image, index)=> { %>
                                            <div class="image-container">
                                                <img src="/product_Assets/<%= image %>" alt="">
                                                <input type="hidden" name="images" value="<%= image %>">
                                                <button type="button" class="close-icon"
                                                    onclick="deleteImage('<%= prodata._id %>',' <%= index %>')"
                                                    data-image="<%= image %>">×</button>
                                            </div>
                                            <% }) %>
                                    </div>
                                    <input class="form-control" type="file" id="imageUpload" name="images"
                                        accept="image/*" multiple>
                                    <div id="imagePreview" class="d-flex flex-wrap mt-3"></div>
                                </div>
                            </div>
                        </div>
                        <div class="card mb-4">
                            <div class="card-body">
                                <label class="form-label">Sizes and Stock</label>
                                <div class="row gx-3">
                                    <div class="col-md-4 mb-2">
                                        <label for="size_xs" class="form-label">XS</label>
                                        <input type="number" placeholder="Stock" id="size_xs" class="form-control"
                                            name="sizes[XS]" value="<%=prodata.sizes[0].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for XS.</div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <label for="size_s" class="form-label">S</label>
                                        <input type="number" placeholder="Stock" id="size_s" class="form-control"
                                            name="sizes[S]" value="<%=prodata.sizes[1].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for S.</div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <label for="size_m" class="form-label">M</label>
                                        <input type="number" placeholder="Stock" id="size_m" class="form-control"
                                            name="sizes[M]" value="<%=prodata.sizes[2].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for M.</div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <label for="size_l" class="form-label">L</label>
                                        <input type="number" placeholder="Stock" id="size_l" class="form-control"
                                            name="sizes[L]" value="<%=prodata.sizes[3].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for L.</div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <label for="size_xl" class="form-label">XL</label>
                                        <input type="number" placeholder="Stock" id="size_xl" class="form-control"
                                            name="sizes[XL]" value="<%=prodata.sizes[4].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for XL.</div>
                                    </div>
                                    <div class="col-md-4 mb-2">
                                        <label for="size_xxl" class="form-label">XXL</label>
                                        <input type="number" placeholder="Stock" id="size_xxl" class="form-control"
                                            name="sizes[XXL]" value="<%=prodata.sizes[5].quantity%>" required min="0">
                                        <div class="invalid-feedback">Please enter a valid quantity for XXL.</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex justify-content-center">
                            <button type="submit" class="btn btn-md rounded font-sm hover-up"
                                style="width: 100%; margin-top: 5%;">Publish</button>
                        </div>
                    </div>
                </div>
            </section>
        </form>


        <div class="modal fade" id="cropperModal" tabindex="-1" aria-labelledby="cropperModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl"> <!-- Change to modal-xl for extra large modal -->
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="cropperModalLabel">Crop Image</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="img-container" style="height: 70vh;"> <!-- Set a fixed height -->
                            <img id="imageToCrop" src="" alt="Image to crop"
                                style="max-width: 100%; max-height: 100%; display: block; margin: auto;">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-primary" id="cropButton">Crop</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    <script src="admin_assets/js/vendors/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="admin_assets/js/vendors/select2.min.js"></script>
    <script src="admin_assets/js/vendors/perfect-scrollbar.js"></script>
    <script src="admin_assets/js/vendors/jquery.fullscreen.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <!-- Main Script -->
    <script src="admin_assets/js/main.js" type="text/javascript"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const imagePreview = document.getElementById('imagePreview');
            const existingImages = document.getElementById('existingImages');
            const imageUpload = document.getElementById('imageUpload');
            const removedImagesInput = document.createElement('input');
            removedImagesInput.type = 'hidden';
            removedImagesInput.name = 'removedImages';
            document.querySelector('form').appendChild(removedImagesInput);

            let removedImages = [];
            let selectedFiles = [];
            let cropper;
            let currentImageContainer;
            let currentImageIndex;

            // Function to create an image element in the preview
            function createImageElement(src, name, index, isNewImage = false) {
                const imgDiv = document.createElement('div');
                imgDiv.classList.add('image-container');

                const img = document.createElement('img');
                img.src = src;
                img.alt = name;

                if (isNewImage) {
                    img.addEventListener('click', () => showCropperModal(img, imgDiv, index));
                }

                const removeButton = document.createElement('button');
                removeButton.classList.add('close-icon');
                removeButton.textContent = '×';
                removeButton.addEventListener('click', () => {
                    if (isNewImage) {
                        selectedFiles.splice(index, 1);
                        updateFileInput(selectedFiles);
                        imagePreview.removeChild(imgDiv);

                        // Update all subsequent images' indices
                        imagePreview.querySelectorAll('.image-container img').forEach((image, i) => {
                            image.onclick = () => showCropperModal(image, image.parentNode, i);
                        });
                    } else {
                        existingImages.removeChild(imgDiv);
                        removedImages.push(name);
                        removedImagesInput.value = JSON.stringify(removedImages);
                    }
                });

                imgDiv.appendChild(img);
                imgDiv.appendChild(removeButton);
                return imgDiv;
            }

            // Function to update the file input's value
            function updateFileInput(filesArray) {
                const dataTransfer = new DataTransfer();
                filesArray.forEach(file => dataTransfer.items.add(file));
                imageUpload.files = dataTransfer.files;
            }

            // Function to show the cropper modal
            function showCropperModal(img, imgContainer, index) {
                const modalElement = document.getElementById('cropperModal');
                const modal = new bootstrap.Modal(modalElement);
                const imageToCrop = document.getElementById('imageToCrop');
                imageToCrop.src = img.src;
                currentImageContainer = imgContainer;
                currentImageIndex = index;  // Store the index of the current image

                modal.show();

                setTimeout(() => {
                    if (cropper) {
                        cropper.destroy();
                    }

                    cropper = new Cropper(imageToCrop, {
                        aspectRatio: 1,
                        viewMode: 1,
                        minContainerWidth: 100,
                        minContainerHeight: 100,
                        minCropBoxWidth: 100,
                        minCropBoxHeight: 100,
                        ready: function () {
                            this.cropper.setCropBoxData({
                                width: Math.min(this.cropper.getContainerData().width, this.cropper.getContainerData().height) * 0.8,
                                height: Math.min(this.cropper.getContainerData().width, this.cropper.getContainerData().height) * 0.8
                            });
                        }
                    });
                }, 300);

                document.getElementById('cropButton').onclick = function () {
                    const croppedCanvas = cropper.getCroppedCanvas();

                    // Convert the cropped canvas to a Blob
                    croppedCanvas.toBlob((blob) => {
                        if (!blob) {
                            console.error("Blob creation failed");
                            return;
                        }

                        const croppedImage = document.createElement('img');
                        croppedImage.src = URL.createObjectURL(blob);
                        currentImageContainer.replaceChild(croppedImage, currentImageContainer.querySelector('img'));

                        // Replace the original file in the selectedFiles array
                        const file = new File([blob], selectedFiles[currentImageIndex].name, { type: 'image/jpeg', lastModified: Date.now() });
                        selectedFiles[currentImageIndex] = file;

                        // Update the file input with the new files
                        updateFileInput(selectedFiles);

                        // Hide the modal after cropping
                        modal.hide();

                        // Properly dispose of the cropper instance
                        cropper.destroy();
                    }, 'image/jpeg');
                };
            }

            // Handle file input change
            imageUpload.addEventListener('change', function (event) {
                const files = Array.from(event.target.files);
                const startIndex = selectedFiles.length;
                selectedFiles = selectedFiles.concat(files);

                // Update file input with all selected files
                updateFileInput(selectedFiles);

                files.forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const imgElement = createImageElement(e.target.result, file.name, startIndex + index, true);
                        imagePreview.appendChild(imgElement);
                    };
                    reader.readAsDataURL(file);
                });
            });

            // Handle existing image removal
            existingImages.addEventListener('click', function (event) {
                if (event.target.classList.contains('close-icon')) {
                    const imageContainer = event.target.closest('.image-container');
                    const imageName = event.target.getAttribute('data-image');
                    const imageIndex = [...existingImages.children].indexOf(imageContainer);

                    deleteImage('<%= prodata._id %>', imageIndex);
                    removedImages.push(imageName);
                    removedImagesInput.value = JSON.stringify(removedImages);
                    existingImages.removeChild(imageContainer);
                }
            });

            // Function to handle image deletion on the server side
            async function deleteImage(productId, index) {
                try {
                    const response = await fetch('/admin/productImageRemove', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ productId, index })
                    });

                    if (response.ok) {
                        const Toast = Swal.mixin({
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 1000,
                            timerProgressBar: true,
                            didOpen: (toast) => {
                                toast.onmouseenter = Swal.stopTimer;
                                toast.onmouseleave = Swal.resumeTimer;
                            }
                        });
                        Toast.fire({
                            icon: "success",
                            title: "Image Removed"
                        });
                    } else {
                        throw new Error('Image removal failed');
                    }
                } catch (error) {
                    console.error(error);
                }
            }
        });

    </script>
    <script>
        // JavaScript for form validation
        document.getElementById('productForm').addEventListener('submit', function (event) {
            let formIsValid = true;

            const productName = document.getElementById('product_title');
            const brandName = document.getElementById('product_brand');
            const description = document.getElementById('description');

            const namePattern = /^[A-Za-z\s]+$/;
            const descriptionPattern = /[A-Za-z]+/; // Ensures at least one letter

            // Custom validation for product name
            if (!namePattern.test(productName.value)) {
                productName.setCustomValidity('Product name should only contain letters and spaces.');
                formIsValid = false;
                console.log('Invalid product name');
            } else {
                productName.setCustomValidity('');
            }

            // Custom validation for brand name
            if (!namePattern.test(brandName.value)) {
                brandName.setCustomValidity('Brand name should only contain letters and spaces.');
                formIsValid = false;
                console.log('Invalid brand name');
            } else {
                brandName.setCustomValidity('');
            }

            // Custom validation for description
            if (!descriptionPattern.test(description.value)) {
                description.setCustomValidity('Description must contain at least one letter.');
                formIsValid = false;
                console.log('Invalid description');
            } else {
                description.setCustomValidity('');
            }

            // Check form validity
            if (!formIsValid) {
                event.preventDefault(); // Prevent form submission if invalid
                event.stopPropagation();
            } else {
                console.log('Form is valid');
            }

            // Enable validation feedback
            this.classList.add('was-validated');
        });
    </script>
</body>

</html>